/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MilestoneIntegrationPlatformVmsResTfulApi.VAPApi();
  });

  describe('(package)', function() {
    describe('VAPApi', function() {
      describe('deletealarmDefinitionsById', function() {
        it('should call deletealarmDefinitionsById successfully', function(done) {
          // TODO: uncomment, update parameter values for deletealarmDefinitionsById call and complete the assertions
          /*

          instance.deletealarmDefinitionsById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse201);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletelprMatchListsById', function() {
        it('should call deletelprMatchListsById successfully', function(done) {
          // TODO: uncomment, update parameter values for deletelprMatchListsById call and complete the assertions
          /*

          instance.deletelprMatchListsById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse20116);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletemipKindsById', function() {
        it('should call deletemipKindsById successfully', function(done) {
          // TODO: uncomment, update parameter values for deletemipKindsById call and complete the assertions
          /*

          instance.deletemipKindsById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse20119);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletemipKindsByIdmipItems', function() {
        it('should call deletemipKindsByIdmipItems successfully', function(done) {
          // TODO: uncomment, update parameter values for deletemipKindsByIdmipItems call and complete the assertions
          /*

          instance.deletemipKindsByIdmipItems(idParent, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200110);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllaccessControlSystems', function() {
        it('should call getAllaccessControlSystems successfully', function(done) {
          // TODO: uncomment getAllaccessControlSystems call and complete the assertions
          /*

          instance.getAllaccessControlSystems(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllaccessControlUnits', function() {
        it('should call getAllaccessControlUnits successfully', function(done) {
          // TODO: uncomment getAllaccessControlUnits call and complete the assertions
          /*

          instance.getAllaccessControlUnits(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2004);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllaccessControlUnitsInAaccessControlSystems', function() {
        it('should call getAllaccessControlUnitsInAaccessControlSystems successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllaccessControlUnitsInAaccessControlSystems call and complete the assertions
          /*

          instance.getAllaccessControlUnitsInAaccessControlSystems(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2004);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllaccessControlUnitsInAaccessControlUnits', function() {
        it('should call getAllaccessControlUnitsInAaccessControlUnits successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllaccessControlUnitsInAaccessControlUnits call and complete the assertions
          /*

          instance.getAllaccessControlUnitsInAaccessControlUnits(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2004);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllalarmDefinitions', function() {
        it('should call getAllalarmDefinitions successfully', function(done) {
          // TODO: uncomment getAllalarmDefinitions call and complete the assertions
          /*

          instance.getAllalarmDefinitions(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2007);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAlllprMatchLists', function() {
        it('should call getAlllprMatchLists successfully', function(done) {
          // TODO: uncomment getAlllprMatchLists call and complete the assertions
          /*

          instance.getAlllprMatchLists(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse20097);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllmipItems', function() {
        it('should call getAllmipItems successfully', function(done) {
          // TODO: uncomment getAllmipItems call and complete the assertions
          /*

          instance.getAllmipItems(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200108);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllmipItemsInAmipItems', function() {
        it('should call getAllmipItemsInAmipItems successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllmipItemsInAmipItems call and complete the assertions
          /*

          instance.getAllmipItemsInAmipItems(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200108);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllmipItemsInAmipKinds', function() {
        it('should call getAllmipItemsInAmipKinds successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllmipItemsInAmipKinds call and complete the assertions
          /*

          instance.getAllmipItemsInAmipKinds(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200108);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllmipKinds', function() {
        it('should call getAllmipKinds successfully', function(done) {
          // TODO: uncomment getAllmipKinds call and complete the assertions
          /*

          instance.getAllmipKinds(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200111);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getaccessControlSystemsById', function() {
        it('should call getaccessControlSystemsById successfully', function(done) {
          // TODO: uncomment, update parameter values for getaccessControlSystemsById call and complete the assertions
          /*
          var opts = {};

          instance.getaccessControlSystemsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2001);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getaccessControlUnitsById', function() {
        it('should call getaccessControlUnitsById successfully', function(done) {
          // TODO: uncomment, update parameter values for getaccessControlUnitsById call and complete the assertions
          /*
          var opts = {};

          instance.getaccessControlUnitsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2005);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getalarmDefinitionsById', function() {
        it('should call getalarmDefinitionsById successfully', function(done) {
          // TODO: uncomment, update parameter values for getalarmDefinitionsById call and complete the assertions
          /*
          var opts = {};

          instance.getalarmDefinitionsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2008);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getlprMatchListsById', function() {
        it('should call getlprMatchListsById successfully', function(done) {
          // TODO: uncomment, update parameter values for getlprMatchListsById call and complete the assertions
          /*
          var opts = {};

          instance.getlprMatchListsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse20098);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getmipItemsById', function() {
        it('should call getmipItemsById successfully', function(done) {
          // TODO: uncomment, update parameter values for getmipItemsById call and complete the assertions
          /*
          var opts = {};

          instance.getmipItemsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200109);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getmipKindsById', function() {
        it('should call getmipKindsById successfully', function(done) {
          // TODO: uncomment, update parameter values for getmipKindsById call and complete the assertions
          /*
          var opts = {};

          instance.getmipKindsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200113);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchaccessControlSystemsById', function() {
        it('should call patchaccessControlSystemsById successfully', function(done) {
          // TODO: uncomment, update parameter values for patchaccessControlSystemsById call and complete the assertions
          /*
          var opts = {};

          instance.patchaccessControlSystemsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchaccessControlUnitsById', function() {
        it('should call patchaccessControlUnitsById successfully', function(done) {
          // TODO: uncomment, update parameter values for patchaccessControlUnitsById call and complete the assertions
          /*
          var opts = {};

          instance.patchaccessControlUnitsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2006);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchalarmDefinitionsById', function() {
        it('should call patchalarmDefinitionsById successfully', function(done) {
          // TODO: uncomment, update parameter values for patchalarmDefinitionsById call and complete the assertions
          /*
          var opts = {};

          instance.patchalarmDefinitionsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse201);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchlprMatchListsById', function() {
        it('should call patchlprMatchListsById successfully', function(done) {
          // TODO: uncomment, update parameter values for patchlprMatchListsById call and complete the assertions
          /*
          var opts = {};

          instance.patchlprMatchListsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse20116);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchmipItemsById', function() {
        it('should call patchmipItemsById successfully', function(done) {
          // TODO: uncomment, update parameter values for patchmipItemsById call and complete the assertions
          /*
          var opts = {};

          instance.patchmipItemsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200110);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchmipKindsById', function() {
        it('should call patchmipKindsById successfully', function(done) {
          // TODO: uncomment, update parameter values for patchmipKindsById call and complete the assertions
          /*
          var opts = {};

          instance.patchmipKindsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse20119);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postTaskForaccessControlSystems', function() {
        it('should call postTaskForaccessControlSystems successfully', function(done) {
          // TODO: uncomment, update parameter values for postTaskForaccessControlSystems call and complete the assertions
          /*
          var opts = {};

          instance.postTaskForaccessControlSystems(id, task, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postTaskForlprMatchLists', function() {
        it('should call postTaskForlprMatchLists successfully', function(done) {
          // TODO: uncomment, update parameter values for postTaskForlprMatchLists call and complete the assertions
          /*
          var opts = {};

          instance.postTaskForlprMatchLists(id, task, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse20099);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postalarmDefinitionsById', function() {
        it('should call postalarmDefinitionsById successfully', function(done) {
          // TODO: uncomment, update parameter values for postalarmDefinitionsById call and complete the assertions
          /*
          var opts = {};

          instance.postalarmDefinitionsById(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse201);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postlprMatchListsById', function() {
        it('should call postlprMatchListsById successfully', function(done) {
          // TODO: uncomment, update parameter values for postlprMatchListsById call and complete the assertions
          /*
          var opts = {};

          instance.postlprMatchListsById(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse20116);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postmipKindsById', function() {
        it('should call postmipKindsById successfully', function(done) {
          // TODO: uncomment, update parameter values for postmipKindsById call and complete the assertions
          /*
          var opts = {};

          instance.postmipKindsById(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200112);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postmipKindsByIdmipItems', function() {
        it('should call postmipKindsByIdmipItems successfully', function(done) {
          // TODO: uncomment, update parameter values for postmipKindsByIdmipItems call and complete the assertions
          /*
          var opts = {};

          instance.postmipKindsByIdmipItems(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200110);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putaccessControlSystemsById', function() {
        it('should call putaccessControlSystemsById successfully', function(done) {
          // TODO: uncomment, update parameter values for putaccessControlSystemsById call and complete the assertions
          /*
          var opts = {};

          instance.putaccessControlSystemsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2002);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putaccessControlUnitsById', function() {
        it('should call putaccessControlUnitsById successfully', function(done) {
          // TODO: uncomment, update parameter values for putaccessControlUnitsById call and complete the assertions
          /*
          var opts = {};

          instance.putaccessControlUnitsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse2006);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putalarmDefinitionsById', function() {
        it('should call putalarmDefinitionsById successfully', function(done) {
          // TODO: uncomment, update parameter values for putalarmDefinitionsById call and complete the assertions
          /*
          var opts = {};

          instance.putalarmDefinitionsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse201);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putlprMatchListsById', function() {
        it('should call putlprMatchListsById successfully', function(done) {
          // TODO: uncomment, update parameter values for putlprMatchListsById call and complete the assertions
          /*
          var opts = {};

          instance.putlprMatchListsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse20116);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putmipItemsById', function() {
        it('should call putmipItemsById successfully', function(done) {
          // TODO: uncomment, update parameter values for putmipItemsById call and complete the assertions
          /*
          var opts = {};

          instance.putmipItemsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse200110);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putmipKindsById', function() {
        it('should call putmipKindsById successfully', function(done) {
          // TODO: uncomment, update parameter values for putmipKindsById call and complete the assertions
          /*
          var opts = {};

          instance.putmipKindsById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.InlineResponse20119);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
