/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ClientProfileSetups', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.ClientProfileSetups();
      });

      it('should create an instance of ClientProfileSetups', function() {
        // TODO: update the code to test ClientProfileSetups
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.ClientProfileSetups);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupTab (base name: "panesSetupTab")', function() {
        // TODO: update the code to test the property panesSetupTab
        expect(instance).to.have.property('panesSetupTab');
        // expect(instance.panesSetupTab).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupViews (base name: "panesSetupViews")', function() {
        // TODO: update the code to test the property panesSetupViews
        expect(instance).to.have.property('panesSetupViews');
        // expect(instance.panesSetupViews).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupViewsLocked (base name: "panesSetupViewsLocked")', function() {
        // TODO: update the code to test the property panesSetupViewsLocked
        expect(instance).to.have.property('panesSetupViewsLocked');
        // expect(instance.panesSetupViewsLocked).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupSystemOverview (base name: "panesSetupSystemOverview")', function() {
        // TODO: update the code to test the property panesSetupSystemOverview
        expect(instance).to.have.property('panesSetupSystemOverview');
        // expect(instance.panesSetupSystemOverview).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupSystemOverviewLocked (base name: "panesSetupSystemOverviewLocked")', function() {
        // TODO: update the code to test the property panesSetupSystemOverviewLocked
        expect(instance).to.have.property('panesSetupSystemOverviewLocked');
        // expect(instance.panesSetupSystemOverviewLocked).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupOverlayButtons (base name: "panesSetupOverlayButtons")', function() {
        // TODO: update the code to test the property panesSetupOverlayButtons
        expect(instance).to.have.property('panesSetupOverlayButtons');
        // expect(instance.panesSetupOverlayButtons).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupOverlayButtonsLocked (base name: "panesSetupOverlayButtonsLocked")', function() {
        // TODO: update the code to test the property panesSetupOverlayButtonsLocked
        expect(instance).to.have.property('panesSetupOverlayButtonsLocked');
        // expect(instance.panesSetupOverlayButtonsLocked).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupProperties (base name: "panesSetupProperties")', function() {
        // TODO: update the code to test the property panesSetupProperties
        expect(instance).to.have.property('panesSetupProperties');
        // expect(instance.panesSetupProperties).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupPropertiesLocked (base name: "panesSetupPropertiesLocked")', function() {
        // TODO: update the code to test the property panesSetupPropertiesLocked
        expect(instance).to.have.property('panesSetupPropertiesLocked');
        // expect(instance.panesSetupPropertiesLocked).to.be(expectedValueLiteral);
      });

      it('should have the property functionsSetupOverlayButtons (base name: "functionsSetupOverlayButtons")', function() {
        // TODO: update the code to test the property functionsSetupOverlayButtons
        expect(instance).to.have.property('functionsSetupOverlayButtons');
        // expect(instance.functionsSetupOverlayButtons).to.be(expectedValueLiteral);
      });

      it('should have the property functionsSetupOverlayButtonsLocked (base name: "functionsSetupOverlayButtonsLocked")', function() {
        // TODO: update the code to test the property functionsSetupOverlayButtonsLocked
        expect(instance).to.have.property('functionsSetupOverlayButtonsLocked');
        // expect(instance.functionsSetupOverlayButtonsLocked).to.be(expectedValueLiteral);
      });

      it('should have the property functionsSetupEnableVideoBufferingOption (base name: "functionsSetupEnableVideoBufferingOption")', function() {
        // TODO: update the code to test the property functionsSetupEnableVideoBufferingOption
        expect(instance).to.have.property('functionsSetupEnableVideoBufferingOption');
        // expect(instance.functionsSetupEnableVideoBufferingOption).to.be(expectedValueLiteral);
      });

      it('should have the property functionsSetupEnableVideoBufferingOptionLocked (base name: "functionsSetupEnableVideoBufferingOptionLocked")', function() {
        // TODO: update the code to test the property functionsSetupEnableVideoBufferingOptionLocked
        expect(instance).to.have.property('functionsSetupEnableVideoBufferingOptionLocked');
        // expect(instance.functionsSetupEnableVideoBufferingOptionLocked).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupMIPPlugin (base name: "panesSetupMIPPlugin")', function() {
        // TODO: update the code to test the property panesSetupMIPPlugin
        expect(instance).to.have.property('panesSetupMIPPlugin');
        // expect(instance.panesSetupMIPPlugin).to.be(expectedValueLiteral);
      });

      it('should have the property panesSetupMIPPluginLocked (base name: "panesSetupMIPPluginLocked")', function() {
        // TODO: update the code to test the property panesSetupMIPPluginLocked
        expect(instance).to.have.property('panesSetupMIPPluginLocked');
        // expect(instance.panesSetupMIPPluginLocked).to.be(expectedValueLiteral);
      });

      it('should have the property mapEditMaps (base name: "mapEditMaps")', function() {
        // TODO: update the code to test the property mapEditMaps
        expect(instance).to.have.property('mapEditMaps');
        // expect(instance.mapEditMaps).to.be(expectedValueLiteral);
      });

      it('should have the property mapEditGisMap (base name: "mapEditGisMap")', function() {
        // TODO: update the code to test the property mapEditGisMap
        expect(instance).to.have.property('mapEditGisMap');
        // expect(instance.mapEditGisMap).to.be(expectedValueLiteral);
      });

    });
  });

}));
