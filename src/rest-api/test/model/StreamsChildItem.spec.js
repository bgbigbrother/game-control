/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('StreamsChildItem', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.StreamsChildItem();
      });

      it('should create an instance of StreamsChildItem', function() {
        // TODO: update the code to test StreamsChildItem
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.StreamsChildItem);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property edgeStorageSupported (base name: "edgeStorageSupported")', function() {
        // TODO: update the code to test the property edgeStorageSupported
        expect(instance).to.have.property('edgeStorageSupported');
        // expect(instance.edgeStorageSupported).to.be(expectedValueLiteral);
      });

      it('should have the property resolution (base name: "resolution")', function() {
        // TODO: update the code to test the property resolution
        expect(instance).to.have.property('resolution');
        // expect(instance.resolution).to.be(expectedValueLiteral);
      });

      it('should have the property streamReferenceId (base name: "streamReferenceId")', function() {
        // TODO: update the code to test the property streamReferenceId
        expect(instance).to.have.property('streamReferenceId');
        // expect(instance.streamReferenceId).to.be(expectedValueLiteral);
      });

    });
  });

}));
