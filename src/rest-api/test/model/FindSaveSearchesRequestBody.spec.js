/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FindSaveSearchesRequestBody', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.FindSaveSearchesRequestBody();
      });

      it('should create an instance of FindSaveSearchesRequestBody', function() {
        // TODO: update the code to test FindSaveSearchesRequestBody
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.FindSaveSearchesRequestBody);
      });

      it('should have the property count (base name: "count")', function() {
        // TODO: update the code to test the property count
        expect(instance).to.have.property('count');
        // expect(instance.count).to.be(expectedValueLiteral);
      });

      it('should have the property startIndex (base name: "startIndex")', function() {
        // TODO: update the code to test the property startIndex
        expect(instance).to.have.property('startIndex');
        // expect(instance.startIndex).to.be(expectedValueLiteral);
      });

      it('should have the property keywordFilter (base name: "keywordFilter")', function() {
        // TODO: update the code to test the property keywordFilter
        expect(instance).to.have.property('keywordFilter');
        // expect(instance.keywordFilter).to.be(expectedValueLiteral);
      });

      it('should have the property privateOnly (base name: "privateOnly")', function() {
        // TODO: update the code to test the property privateOnly
        expect(instance).to.have.property('privateOnly');
        // expect(instance.privateOnly).to.be(expectedValueLiteral);
      });

    });
  });

}));
