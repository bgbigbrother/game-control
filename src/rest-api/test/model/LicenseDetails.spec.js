/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('LicenseDetails', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.LicenseDetails();
      });

      it('should create an instance of LicenseDetails', function() {
        // TODO: update the code to test LicenseDetails
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.LicenseDetails);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property pluginId (base name: "pluginId")', function() {
        // TODO: update the code to test the property pluginId
        expect(instance).to.have.property('pluginId');
        // expect(instance.pluginId).to.be(expectedValueLiteral);
      });

      it('should have the property licenseType (base name: "licenseType")', function() {
        // TODO: update the code to test the property licenseType
        expect(instance).to.have.property('licenseType');
        // expect(instance.licenseType).to.be(expectedValueLiteral);
      });

      it('should have the property activated (base name: "activated")', function() {
        // TODO: update the code to test the property activated
        expect(instance).to.have.property('activated');
        // expect(instance.activated).to.be(expectedValueLiteral);
      });

      it('should have the property changesWithoutActivation (base name: "changesWithoutActivation")', function() {
        // TODO: update the code to test the property changesWithoutActivation
        expect(instance).to.have.property('changesWithoutActivation');
        // expect(instance.changesWithoutActivation).to.be(expectedValueLiteral);
      });

      it('should have the property inGrace (base name: "inGrace")', function() {
        // TODO: update the code to test the property inGrace
        expect(instance).to.have.property('inGrace');
        // expect(instance.inGrace).to.be(expectedValueLiteral);
      });

      it('should have the property graceExpired (base name: "graceExpired")', function() {
        // TODO: update the code to test the property graceExpired
        expect(instance).to.have.property('graceExpired');
        // expect(instance.graceExpired).to.be(expectedValueLiteral);
      });

      it('should have the property notLicensed (base name: "notLicensed")', function() {
        // TODO: update the code to test the property notLicensed
        expect(instance).to.have.property('notLicensed');
        // expect(instance.notLicensed).to.be(expectedValueLiteral);
      });

      it('should have the property note (base name: "note")', function() {
        // TODO: update the code to test the property note
        expect(instance).to.have.property('note');
        // expect(instance.note).to.be(expectedValueLiteral);
      });

    });
  });

}));
