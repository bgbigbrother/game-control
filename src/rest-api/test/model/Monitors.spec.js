/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Monitors', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.Monitors();
      });

      it('should create an instance of Monitors', function() {
        // TODO: update the code to test Monitors
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.Monitors);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property lastModified (base name: "lastModified")', function() {
        // TODO: update the code to test the property lastModified
        expect(instance).to.have.property('lastModified');
        // expect(instance.lastModified).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property aspectRatio (base name: "aspectRatio")', function() {
        // TODO: update the code to test the property aspectRatio
        expect(instance).to.have.property('aspectRatio');
        // expect(instance.aspectRatio).to.be(expectedValueLiteral);
      });

      it('should have the property emptyViewItems (base name: "emptyViewItems")', function() {
        // TODO: update the code to test the property emptyViewItems
        expect(instance).to.have.property('emptyViewItems');
        // expect(instance.emptyViewItems).to.be(expectedValueLiteral);
      });

      it('should have the property insertionMethod (base name: "insertionMethod")', function() {
        // TODO: update the code to test the property insertionMethod
        expect(instance).to.have.property('insertionMethod');
        // expect(instance.insertionMethod).to.be(expectedValueLiteral);
      });

      it('should have the property locationX (base name: "locationX")', function() {
        // TODO: update the code to test the property locationX
        expect(instance).to.have.property('locationX');
        // expect(instance.locationX).to.be(expectedValueLiteral);
      });

      it('should have the property locationY (base name: "locationY")', function() {
        // TODO: update the code to test the property locationY
        expect(instance).to.have.property('locationY');
        // expect(instance.locationY).to.be(expectedValueLiteral);
      });

      it('should have the property monitorSize (base name: "monitorSize")', function() {
        // TODO: update the code to test the property monitorSize
        expect(instance).to.have.property('monitorSize');
        // expect(instance.monitorSize).to.be(expectedValueLiteral);
      });

      it('should have the property noLayout (base name: "noLayout")', function() {
        // TODO: update the code to test the property noLayout
        expect(instance).to.have.property('noLayout');
        // expect(instance.noLayout).to.be(expectedValueLiteral);
      });

      it('should have the property monitorState (base name: "monitorState")', function() {
        // TODO: update the code to test the property monitorState
        expect(instance).to.have.property('monitorState');
        // expect(instance.monitorState).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
