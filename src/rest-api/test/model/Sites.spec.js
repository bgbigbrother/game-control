/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Sites', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.Sites();
      });

      it('should create an instance of Sites', function() {
        // TODO: update the code to test Sites
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.Sites);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property lastModified (base name: "lastModified")', function() {
        // TODO: update the code to test the property lastModified
        expect(instance).to.have.property('lastModified');
        // expect(instance.lastModified).to.be(expectedValueLiteral);
      });

      it('should have the property timeZone (base name: "timeZone")', function() {
        // TODO: update the code to test the property timeZone
        expect(instance).to.have.property('timeZone');
        // expect(instance.timeZone).to.be(expectedValueLiteral);
      });

      it('should have the property computerName (base name: "computerName")', function() {
        // TODO: update the code to test the property computerName
        expect(instance).to.have.property('computerName');
        // expect(instance.computerName).to.be(expectedValueLiteral);
      });

      it('should have the property domainName (base name: "domainName")', function() {
        // TODO: update the code to test the property domainName
        expect(instance).to.have.property('domainName');
        // expect(instance.domainName).to.be(expectedValueLiteral);
      });

      it('should have the property lastStatusHandshake (base name: "lastStatusHandshake")', function() {
        // TODO: update the code to test the property lastStatusHandshake
        expect(instance).to.have.property('lastStatusHandshake');
        // expect(instance.lastStatusHandshake).to.be(expectedValueLiteral);
      });

      it('should have the property physicalMemory (base name: "physicalMemory")', function() {
        // TODO: update the code to test the property physicalMemory
        expect(instance).to.have.property('physicalMemory');
        // expect(instance.physicalMemory).to.be(expectedValueLiteral);
      });

      it('should have the property platform (base name: "platform")', function() {
        // TODO: update the code to test the property platform
        expect(instance).to.have.property('platform');
        // expect(instance.platform).to.be(expectedValueLiteral);
      });

      it('should have the property processors (base name: "processors")', function() {
        // TODO: update the code to test the property processors
        expect(instance).to.have.property('processors');
        // expect(instance.processors).to.be(expectedValueLiteral);
      });

      it('should have the property serviceAccount (base name: "serviceAccount")', function() {
        // TODO: update the code to test the property serviceAccount
        expect(instance).to.have.property('serviceAccount');
        // expect(instance.serviceAccount).to.be(expectedValueLiteral);
      });

      it('should have the property synchronizationStatus (base name: "synchronizationStatus")', function() {
        // TODO: update the code to test the property synchronizationStatus
        expect(instance).to.have.property('synchronizationStatus');
        // expect(instance.synchronizationStatus).to.be(expectedValueLiteral);
      });

      it('should have the property masterSiteAddress (base name: "masterSiteAddress")', function() {
        // TODO: update the code to test the property masterSiteAddress
        expect(instance).to.have.property('masterSiteAddress');
        // expect(instance.masterSiteAddress).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
