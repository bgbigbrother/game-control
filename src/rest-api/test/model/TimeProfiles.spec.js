/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TimeProfiles', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.TimeProfiles();
      });

      it('should create an instance of TimeProfiles', function() {
        // TODO: update the code to test TimeProfiles
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.TimeProfiles);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property lastModified (base name: "lastModified")', function() {
        // TODO: update the code to test the property lastModified
        expect(instance).to.have.property('lastModified');
        // expect(instance.lastModified).to.be(expectedValueLiteral);
      });

      it('should have the property timeProfileType (base name: "timeProfileType")', function() {
        // TODO: update the code to test the property timeProfileType
        expect(instance).to.have.property('timeProfileType');
        // expect(instance.timeProfileType).to.be(expectedValueLiteral);
      });

      it('should have the property sunclockGPSCoordinate (base name: "sunclockGPSCoordinate")', function() {
        // TODO: update the code to test the property sunclockGPSCoordinate
        expect(instance).to.have.property('sunclockGPSCoordinate');
        // expect(instance.sunclockGPSCoordinate).to.be(expectedValueLiteral);
      });

      it('should have the property sunclockSunRise (base name: "sunclockSunRise")', function() {
        // TODO: update the code to test the property sunclockSunRise
        expect(instance).to.have.property('sunclockSunRise');
        // expect(instance.sunclockSunRise).to.be(expectedValueLiteral);
      });

      it('should have the property sunclockSunSet (base name: "sunclockSunSet")', function() {
        // TODO: update the code to test the property sunclockSunSet
        expect(instance).to.have.property('sunclockSunSet');
        // expect(instance.sunclockSunSet).to.be(expectedValueLiteral);
      });

      it('should have the property sunclockTimeZone (base name: "sunclockTimeZone")', function() {
        // TODO: update the code to test the property sunclockTimeZone
        expect(instance).to.have.property('sunclockTimeZone');
        // expect(instance.sunclockTimeZone).to.be(expectedValueLiteral);
      });

      it('should have the property timeProfileAppointmentRecur (base name: "timeProfileAppointmentRecur")', function() {
        // TODO: update the code to test the property timeProfileAppointmentRecur
        expect(instance).to.have.property('timeProfileAppointmentRecur');
        // expect(instance.timeProfileAppointmentRecur).to.be(expectedValueLiteral);
      });

      it('should have the property timeProfileAppointmentRoot (base name: "timeProfileAppointmentRoot")', function() {
        // TODO: update the code to test the property timeProfileAppointmentRoot
        expect(instance).to.have.property('timeProfileAppointmentRoot');
        // expect(instance.timeProfileAppointmentRoot).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
