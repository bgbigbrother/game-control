/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AlarmDefinitions', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.AlarmDefinitions();
      });

      it('should create an instance of AlarmDefinitions', function() {
        // TODO: update the code to test AlarmDefinitions
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.AlarmDefinitions);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property eventTypeGroup (base name: "eventTypeGroup")', function() {
        // TODO: update the code to test the property eventTypeGroup
        expect(instance).to.have.property('eventTypeGroup');
        // expect(instance.eventTypeGroup).to.be(expectedValueLiteral);
      });

      it('should have the property eventType (base name: "eventType")', function() {
        // TODO: update the code to test the property eventType
        expect(instance).to.have.property('eventType');
        // expect(instance.eventType).to.be(expectedValueLiteral);
      });

      it('should have the property sourceList (base name: "sourceList")', function() {
        // TODO: update the code to test the property sourceList
        expect(instance).to.have.property('sourceList');
        // expect(instance.sourceList).to.be(expectedValueLiteral);
      });

      it('should have the property enableRule (base name: "enableRule")', function() {
        // TODO: update the code to test the property enableRule
        expect(instance).to.have.property('enableRule');
        // expect(instance.enableRule).to.be(expectedValueLiteral);
      });

      it('should have the property timeProfile (base name: "timeProfile")', function() {
        // TODO: update the code to test the property timeProfile
        expect(instance).to.have.property('timeProfile');
        // expect(instance.timeProfile).to.be(expectedValueLiteral);
      });

      it('should have the property enableEventList (base name: "enableEventList")', function() {
        // TODO: update the code to test the property enableEventList
        expect(instance).to.have.property('enableEventList');
        // expect(instance.enableEventList).to.be(expectedValueLiteral);
      });

      it('should have the property disableEventList (base name: "disableEventList")', function() {
        // TODO: update the code to test the property disableEventList
        expect(instance).to.have.property('disableEventList');
        // expect(instance.disableEventList).to.be(expectedValueLiteral);
      });

      it('should have the property managementTimeoutTime (base name: "managementTimeoutTime")', function() {
        // TODO: update the code to test the property managementTimeoutTime
        expect(instance).to.have.property('managementTimeoutTime');
        // expect(instance.managementTimeoutTime).to.be(expectedValueLiteral);
      });

      it('should have the property managementTimeoutEventList (base name: "managementTimeoutEventList")', function() {
        // TODO: update the code to test the property managementTimeoutEventList
        expect(instance).to.have.property('managementTimeoutEventList');
        // expect(instance.managementTimeoutEventList).to.be(expectedValueLiteral);
      });

      it('should have the property relatedCameraList (base name: "relatedCameraList")', function() {
        // TODO: update the code to test the property relatedCameraList
        expect(instance).to.have.property('relatedCameraList');
        // expect(instance.relatedCameraList).to.be(expectedValueLiteral);
      });

      it('should have the property mapType (base name: "mapType")', function() {
        // TODO: update the code to test the property mapType
        expect(instance).to.have.property('mapType');
        // expect(instance.mapType).to.be(expectedValueLiteral);
      });

      it('should have the property relatedMap (base name: "relatedMap")', function() {
        // TODO: update the code to test the property relatedMap
        expect(instance).to.have.property('relatedMap');
        // expect(instance.relatedMap).to.be(expectedValueLiteral);
      });

      it('should have the property owner (base name: "owner")', function() {
        // TODO: update the code to test the property owner
        expect(instance).to.have.property('owner');
        // expect(instance.owner).to.be(expectedValueLiteral);
      });

      it('should have the property priority (base name: "priority")', function() {
        // TODO: update the code to test the property priority
        expect(instance).to.have.property('priority');
        // expect(instance.priority).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property triggerEventlist (base name: "triggerEventlist")', function() {
        // TODO: update the code to test the property triggerEventlist
        expect(instance).to.have.property('triggerEventlist');
        // expect(instance.triggerEventlist).to.be(expectedValueLiteral);
      });

      it('should have the property autoClose (base name: "autoClose")', function() {
        // TODO: update the code to test the property autoClose
        expect(instance).to.have.property('autoClose');
        // expect(instance.autoClose).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
