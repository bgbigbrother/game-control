/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HardwareDrivers', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.HardwareDrivers();
      });

      it('should create an instance of HardwareDrivers', function() {
        // TODO: update the code to test HardwareDrivers
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.HardwareDrivers);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property groupName (base name: "groupName")', function() {
        // TODO: update the code to test the property groupName
        expect(instance).to.have.property('groupName');
        // expect(instance.groupName).to.be(expectedValueLiteral);
      });

      it('should have the property _number (base name: "number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property useCount (base name: "useCount")', function() {
        // TODO: update the code to test the property useCount
        expect(instance).to.have.property('useCount');
        // expect(instance.useCount).to.be(expectedValueLiteral);
      });

      it('should have the property driverVersion (base name: "driverVersion")', function() {
        // TODO: update the code to test the property driverVersion
        expect(instance).to.have.property('driverVersion');
        // expect(instance.driverVersion).to.be(expectedValueLiteral);
      });

      it('should have the property driverRevision (base name: "driverRevision")', function() {
        // TODO: update the code to test the property driverRevision
        expect(instance).to.have.property('driverRevision');
        // expect(instance.driverRevision).to.be(expectedValueLiteral);
      });

      it('should have the property driverType (base name: "driverType")', function() {
        // TODO: update the code to test the property driverType
        expect(instance).to.have.property('driverType');
        // expect(instance.driverType).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
