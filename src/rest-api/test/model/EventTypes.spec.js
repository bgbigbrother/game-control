/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('EventTypes', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.EventTypes();
      });

      it('should create an instance of EventTypes', function() {
        // TODO: update the code to test EventTypes
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.EventTypes);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property lastModified (base name: "lastModified")', function() {
        // TODO: update the code to test the property lastModified
        expect(instance).to.have.property('lastModified');
        // expect(instance.lastModified).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property generatorType (base name: "generatorType")', function() {
        // TODO: update the code to test the property generatorType
        expect(instance).to.have.property('generatorType');
        // expect(instance.generatorType).to.be(expectedValueLiteral);
      });

      it('should have the property generatorSubtype (base name: "generatorSubtype")', function() {
        // TODO: update the code to test the property generatorSubtype
        expect(instance).to.have.property('generatorSubtype');
        // expect(instance.generatorSubtype).to.be(expectedValueLiteral);
      });

      it('should have the property generatorName (base name: "generatorName")', function() {
        // TODO: update the code to test the property generatorName
        expect(instance).to.have.property('generatorName');
        // expect(instance.generatorName).to.be(expectedValueLiteral);
      });

      it('should have the property generatorID (base name: "generatorID")', function() {
        // TODO: update the code to test the property generatorID
        expect(instance).to.have.property('generatorID');
        // expect(instance.generatorID).to.be(expectedValueLiteral);
      });

      it('should have the property generatorGroupName (base name: "generatorGroupName")', function() {
        // TODO: update the code to test the property generatorGroupName
        expect(instance).to.have.property('generatorGroupName');
        // expect(instance.generatorGroupName).to.be(expectedValueLiteral);
      });

      it('should have the property generatorGroupId (base name: "generatorGroupId")', function() {
        // TODO: update the code to test the property generatorGroupId
        expect(instance).to.have.property('generatorGroupId');
        // expect(instance.generatorGroupId).to.be(expectedValueLiteral);
      });

      it('should have the property occursGlobally (base name: "occursGlobally")', function() {
        // TODO: update the code to test the property occursGlobally
        expect(instance).to.have.property('occursGlobally');
        // expect(instance.occursGlobally).to.be(expectedValueLiteral);
      });

      it('should have the property builtIn (base name: "builtIn")', function() {
        // TODO: update the code to test the property builtIn
        expect(instance).to.have.property('builtIn');
        // expect(instance.builtIn).to.be(expectedValueLiteral);
      });

      it('should have the property counterEventID (base name: "counterEventID")', function() {
        // TODO: update the code to test the property counterEventID
        expect(instance).to.have.property('counterEventID');
        // expect(instance.counterEventID).to.be(expectedValueLiteral);
      });

      it('should have the property sourceArray (base name: "sourceArray")', function() {
        // TODO: update the code to test the property sourceArray
        expect(instance).to.have.property('sourceArray');
        // expect(instance.sourceArray).to.be(expectedValueLiteral);
      });

      it('should have the property sourceFilterArray (base name: "sourceFilterArray")', function() {
        // TODO: update the code to test the property sourceFilterArray
        expect(instance).to.have.property('sourceFilterArray');
        // expect(instance.sourceFilterArray).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
