/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ClientProfileGisMaps', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.ClientProfileGisMaps();
      });

      it('should create an instance of ClientProfileGisMaps', function() {
        // TODO: update the code to test ClientProfileGisMaps
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.ClientProfileGisMaps);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapOpenStreetMapGeographicLayer (base name: "gisMapOpenStreetMapGeographicLayer")', function() {
        // TODO: update the code to test the property gisMapOpenStreetMapGeographicLayer
        expect(instance).to.have.property('gisMapOpenStreetMapGeographicLayer');
        // expect(instance.gisMapOpenStreetMapGeographicLayer).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapOpenStreetMapGeographicLayerLocked (base name: "gisMapOpenStreetMapGeographicLayerLocked")', function() {
        // TODO: update the code to test the property gisMapOpenStreetMapGeographicLayerLocked
        expect(instance).to.have.property('gisMapOpenStreetMapGeographicLayerLocked');
        // expect(instance.gisMapOpenStreetMapGeographicLayerLocked).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapOpenStreetMapAlternativeServer (base name: "gisMapOpenStreetMapAlternativeServer")', function() {
        // TODO: update the code to test the property gisMapOpenStreetMapAlternativeServer
        expect(instance).to.have.property('gisMapOpenStreetMapAlternativeServer');
        // expect(instance.gisMapOpenStreetMapAlternativeServer).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapOpenStreetMapAlternativeServerLocked (base name: "gisMapOpenStreetMapAlternativeServerLocked")', function() {
        // TODO: update the code to test the property gisMapOpenStreetMapAlternativeServerLocked
        expect(instance).to.have.property('gisMapOpenStreetMapAlternativeServerLocked');
        // expect(instance.gisMapOpenStreetMapAlternativeServerLocked).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapCreateLayerLocation (base name: "gisMapCreateLayerLocation")', function() {
        // TODO: update the code to test the property gisMapCreateLayerLocation
        expect(instance).to.have.property('gisMapCreateLayerLocation');
        // expect(instance.gisMapCreateLayerLocation).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapCreateLayerLocationLocked (base name: "gisMapCreateLayerLocationLocked")', function() {
        // TODO: update the code to test the property gisMapCreateLayerLocationLocked
        expect(instance).to.have.property('gisMapCreateLayerLocationLocked');
        // expect(instance.gisMapCreateLayerLocationLocked).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapCacheCleanUp (base name: "gisMapCacheCleanUp")', function() {
        // TODO: update the code to test the property gisMapCacheCleanUp
        expect(instance).to.have.property('gisMapCacheCleanUp');
        // expect(instance.gisMapCacheCleanUp).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapCacheCleanUpLocked (base name: "gisMapCacheCleanUpLocked")', function() {
        // TODO: update the code to test the property gisMapCacheCleanUpLocked
        expect(instance).to.have.property('gisMapCacheCleanUpLocked');
        // expect(instance.gisMapCacheCleanUpLocked).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapBingMapKey (base name: "gisMapBingMapKey")', function() {
        // TODO: update the code to test the property gisMapBingMapKey
        expect(instance).to.have.property('gisMapBingMapKey');
        // expect(instance.gisMapBingMapKey).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapBingMapKeyLocked (base name: "gisMapBingMapKeyLocked")', function() {
        // TODO: update the code to test the property gisMapBingMapKeyLocked
        expect(instance).to.have.property('gisMapBingMapKeyLocked');
        // expect(instance.gisMapBingMapKeyLocked).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapGoogleMapClientId (base name: "gisMapGoogleMapClientId")', function() {
        // TODO: update the code to test the property gisMapGoogleMapClientId
        expect(instance).to.have.property('gisMapGoogleMapClientId');
        // expect(instance.gisMapGoogleMapClientId).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapGoogleMapClientIdLocked (base name: "gisMapGoogleMapClientIdLocked")', function() {
        // TODO: update the code to test the property gisMapGoogleMapClientIdLocked
        expect(instance).to.have.property('gisMapGoogleMapClientIdLocked');
        // expect(instance.gisMapGoogleMapClientIdLocked).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapGoogleMapPrivateKey (base name: "gisMapGoogleMapPrivateKey")', function() {
        // TODO: update the code to test the property gisMapGoogleMapPrivateKey
        expect(instance).to.have.property('gisMapGoogleMapPrivateKey');
        // expect(instance.gisMapGoogleMapPrivateKey).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapGoogleMapPrivateKeyLocked (base name: "gisMapGoogleMapPrivateKeyLocked")', function() {
        // TODO: update the code to test the property gisMapGoogleMapPrivateKeyLocked
        expect(instance).to.have.property('gisMapGoogleMapPrivateKeyLocked');
        // expect(instance.gisMapGoogleMapPrivateKeyLocked).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapGoogleMapSigningSecret (base name: "gisMapGoogleMapSigningSecret")', function() {
        // TODO: update the code to test the property gisMapGoogleMapSigningSecret
        expect(instance).to.have.property('gisMapGoogleMapSigningSecret');
        // expect(instance.gisMapGoogleMapSigningSecret).to.be(expectedValueLiteral);
      });

      it('should have the property gisMapGoogleMapSigningSecretLocked (base name: "gisMapGoogleMapSigningSecretLocked")', function() {
        // TODO: update the code to test the property gisMapGoogleMapSigningSecretLocked
        expect(instance).to.have.property('gisMapGoogleMapSigningSecretLocked');
        // expect(instance.gisMapGoogleMapSigningSecretLocked).to.be(expectedValueLiteral);
      });

    });
  });

}));
