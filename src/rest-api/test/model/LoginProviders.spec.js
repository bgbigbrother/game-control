/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('LoginProviders', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.LoginProviders();
      });

      it('should create an instance of LoginProviders', function() {
        // TODO: update the code to test LoginProviders
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.LoginProviders);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property clientId (base name: "clientId")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property clientSecret (base name: "clientSecret")', function() {
        // TODO: update the code to test the property clientSecret
        expect(instance).to.have.property('clientSecret');
        // expect(instance.clientSecret).to.be(expectedValueLiteral);
      });

      it('should have the property clientSecretHasValue (base name: "clientSecretHasValue")', function() {
        // TODO: update the code to test the property clientSecretHasValue
        expect(instance).to.have.property('clientSecretHasValue');
        // expect(instance.clientSecretHasValue).to.be(expectedValueLiteral);
      });

      it('should have the property authority (base name: "authority")', function() {
        // TODO: update the code to test the property authority
        expect(instance).to.have.property('authority');
        // expect(instance.authority).to.be(expectedValueLiteral);
      });

      it('should have the property callbackPath (base name: "callbackPath")', function() {
        // TODO: update the code to test the property callbackPath
        expect(instance).to.have.property('callbackPath');
        // expect(instance.callbackPath).to.be(expectedValueLiteral);
      });

      it('should have the property scopes (base name: "scopes")', function() {
        // TODO: update the code to test the property scopes
        expect(instance).to.have.property('scopes');
        // expect(instance.scopes).to.be(expectedValueLiteral);
      });

      it('should have the property userNameClaimType (base name: "userNameClaimType")', function() {
        // TODO: update the code to test the property userNameClaimType
        expect(instance).to.have.property('userNameClaimType');
        // expect(instance.userNameClaimType).to.be(expectedValueLiteral);
      });

      it('should have the property promptForLogin (base name: "promptForLogin")', function() {
        // TODO: update the code to test the property promptForLogin
        expect(instance).to.have.property('promptForLogin');
        // expect(instance.promptForLogin).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
