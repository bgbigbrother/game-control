/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GenericEventDataSources', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.GenericEventDataSources();
      });

      it('should create an instance of GenericEventDataSources', function() {
        // TODO: update the code to test GenericEventDataSources
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.GenericEventDataSources);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourcePort (base name: "dataSourcePort")', function() {
        // TODO: update the code to test the property dataSourcePort
        expect(instance).to.have.property('dataSourcePort');
        // expect(instance.dataSourcePort).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourceSeparator (base name: "dataSourceSeparator")', function() {
        // TODO: update the code to test the property dataSourceSeparator
        expect(instance).to.have.property('dataSourceSeparator');
        // expect(instance.dataSourceSeparator).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourceEncoding (base name: "dataSourceEncoding")', function() {
        // TODO: update the code to test the property dataSourceEncoding
        expect(instance).to.have.property('dataSourceEncoding');
        // expect(instance.dataSourceEncoding).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourceLog (base name: "dataSourceLog")', function() {
        // TODO: update the code to test the property dataSourceLog
        expect(instance).to.have.property('dataSourceLog');
        // expect(instance.dataSourceLog).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourceEcho (base name: "dataSourceEcho")', function() {
        // TODO: update the code to test the property dataSourceEcho
        expect(instance).to.have.property('dataSourceEcho');
        // expect(instance.dataSourceEcho).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourceAllowed (base name: "dataSourceAllowed")', function() {
        // TODO: update the code to test the property dataSourceAllowed
        expect(instance).to.have.property('dataSourceAllowed');
        // expect(instance.dataSourceAllowed).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourceAllowed6 (base name: "dataSourceAllowed6")', function() {
        // TODO: update the code to test the property dataSourceAllowed6
        expect(instance).to.have.property('dataSourceAllowed6');
        // expect(instance.dataSourceAllowed6).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourceProtocol (base name: "dataSourceProtocol")', function() {
        // TODO: update the code to test the property dataSourceProtocol
        expect(instance).to.have.property('dataSourceProtocol');
        // expect(instance.dataSourceProtocol).to.be(expectedValueLiteral);
      });

      it('should have the property dataSourceAddressFamily (base name: "dataSourceAddressFamily")', function() {
        // TODO: update the code to test the property dataSourceAddressFamily
        expect(instance).to.have.property('dataSourceAddressFamily');
        // expect(instance.dataSourceAddressFamily).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
