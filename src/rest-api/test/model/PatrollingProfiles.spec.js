/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PatrollingProfiles', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.PatrollingProfiles();
      });

      it('should create an instance of PatrollingProfiles', function() {
        // TODO: update the code to test PatrollingProfiles
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.PatrollingProfiles);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property customizeTransitions (base name: "customizeTransitions")', function() {
        // TODO: update the code to test the property customizeTransitions
        expect(instance).to.have.property('customizeTransitions');
        // expect(instance.customizeTransitions).to.be(expectedValueLiteral);
      });

      it('should have the property initSpeed (base name: "initSpeed")', function() {
        // TODO: update the code to test the property initSpeed
        expect(instance).to.have.property('initSpeed');
        // expect(instance.initSpeed).to.be(expectedValueLiteral);
      });

      it('should have the property initTransitionTime (base name: "initTransitionTime")', function() {
        // TODO: update the code to test the property initTransitionTime
        expect(instance).to.have.property('initTransitionTime');
        // expect(instance.initTransitionTime).to.be(expectedValueLiteral);
      });

      it('should have the property endPresetId (base name: "endPresetId")', function() {
        // TODO: update the code to test the property endPresetId
        expect(instance).to.have.property('endPresetId');
        // expect(instance.endPresetId).to.be(expectedValueLiteral);
      });

      it('should have the property endSpeed (base name: "endSpeed")', function() {
        // TODO: update the code to test the property endSpeed
        expect(instance).to.have.property('endSpeed');
        // expect(instance.endSpeed).to.be(expectedValueLiteral);
      });

      it('should have the property endTransitionTime (base name: "endTransitionTime")', function() {
        // TODO: update the code to test the property endTransitionTime
        expect(instance).to.have.property('endTransitionTime');
        // expect(instance.endTransitionTime).to.be(expectedValueLiteral);
      });

      it('should have the property patrollingEntries (base name: "patrollingEntries")', function() {
        // TODO: update the code to test the property patrollingEntries
        expect(instance).to.have.property('patrollingEntries');
        // expect(instance.patrollingEntries).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
