/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ArchiveSchedules', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.ArchiveSchedules();
      });

      it('should create an instance of ArchiveSchedules', function() {
        // TODO: update the code to test ArchiveSchedules
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.ArchiveSchedules);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property frequencyType (base name: "frequencyType")', function() {
        // TODO: update the code to test the property frequencyType
        expect(instance).to.have.property('frequencyType');
        // expect(instance.frequencyType).to.be(expectedValueLiteral);
      });

      it('should have the property frequencyRecurrenceFactor (base name: "frequencyRecurrenceFactor")', function() {
        // TODO: update the code to test the property frequencyRecurrenceFactor
        expect(instance).to.have.property('frequencyRecurrenceFactor');
        // expect(instance.frequencyRecurrenceFactor).to.be(expectedValueLiteral);
      });

      it('should have the property frequencyInterval (base name: "frequencyInterval")', function() {
        // TODO: update the code to test the property frequencyInterval
        expect(instance).to.have.property('frequencyInterval');
        // expect(instance.frequencyInterval).to.be(expectedValueLiteral);
      });

      it('should have the property frequencyRelativeInterval (base name: "frequencyRelativeInterval")', function() {
        // TODO: update the code to test the property frequencyRelativeInterval
        expect(instance).to.have.property('frequencyRelativeInterval');
        // expect(instance.frequencyRelativeInterval).to.be(expectedValueLiteral);
      });

      it('should have the property frequencySubDayType (base name: "frequencySubDayType")', function() {
        // TODO: update the code to test the property frequencySubDayType
        expect(instance).to.have.property('frequencySubDayType');
        // expect(instance.frequencySubDayType).to.be(expectedValueLiteral);
      });

      it('should have the property frequencySubDayInterval (base name: "frequencySubDayInterval")', function() {
        // TODO: update the code to test the property frequencySubDayInterval
        expect(instance).to.have.property('frequencySubDayInterval');
        // expect(instance.frequencySubDayInterval).to.be(expectedValueLiteral);
      });

      it('should have the property activeStartTimeOfDay (base name: "activeStartTimeOfDay")', function() {
        // TODO: update the code to test the property activeStartTimeOfDay
        expect(instance).to.have.property('activeStartTimeOfDay');
        // expect(instance.activeStartTimeOfDay).to.be(expectedValueLiteral);
      });

      it('should have the property activeEndTimeOfDay (base name: "activeEndTimeOfDay")', function() {
        // TODO: update the code to test the property activeEndTimeOfDay
        expect(instance).to.have.property('activeEndTimeOfDay');
        // expect(instance.activeEndTimeOfDay).to.be(expectedValueLiteral);
      });

    });
  });

}));
