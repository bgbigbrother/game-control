/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ClassCollectionServerTask', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.ClassCollectionServerTask();
      });

      it('should create an instance of ClassCollectionServerTask', function() {
        // TODO: update the code to test ClassCollectionServerTask
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.ClassCollectionServerTask);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property cameras (base name: "cameras")', function() {
        // TODO: update the code to test the property cameras
        expect(instance).to.have.property('cameras');
        // expect(instance.cameras).to.be(expectedValueLiteral);
      });

      it('should have the property microphones (base name: "microphones")', function() {
        // TODO: update the code to test the property microphones
        expect(instance).to.have.property('microphones');
        // expect(instance.microphones).to.be(expectedValueLiteral);
      });

      it('should have the property speakers (base name: "speakers")', function() {
        // TODO: update the code to test the property speakers
        expect(instance).to.have.property('speakers');
        // expect(instance.speakers).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property inputEvents (base name: "inputEvents")', function() {
        // TODO: update the code to test the property inputEvents
        expect(instance).to.have.property('inputEvents');
        // expect(instance.inputEvents).to.be(expectedValueLiteral);
      });

      it('should have the property outputs (base name: "outputs")', function() {
        // TODO: update the code to test the property outputs
        expect(instance).to.have.property('outputs');
        // expect(instance.outputs).to.be(expectedValueLiteral);
      });

      it('should have the property storages (base name: "storages")', function() {
        // TODO: update the code to test the property storages
        expect(instance).to.have.property('storages');
        // expect(instance.storages).to.be(expectedValueLiteral);
      });

      it('should have the property recordingServers (base name: "recordingServers")', function() {
        // TODO: update the code to test the property recordingServers
        expect(instance).to.have.property('recordingServers');
        // expect(instance.recordingServers).to.be(expectedValueLiteral);
      });

      it('should have the property tasks (base name: "tasks")', function() {
        // TODO: update the code to test the property tasks
        expect(instance).to.have.property('tasks');
        // expect(instance.tasks).to.be(expectedValueLiteral);
      });

    });
  });

}));
