/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('HardwareScanExpressRequestBody', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.HardwareScanExpressRequestBody();
      });

      it('should create an instance of HardwareScanExpressRequestBody', function() {
        // TODO: update the code to test HardwareScanExpressRequestBody
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.HardwareScanExpressRequestBody);
      });

      it('should have the property primaryUserName (base name: "primaryUserName")', function() {
        // TODO: update the code to test the property primaryUserName
        expect(instance).to.have.property('primaryUserName');
        // expect(instance.primaryUserName).to.be(expectedValueLiteral);
      });

      it('should have the property primaryPassword (base name: "primaryPassword")', function() {
        // TODO: update the code to test the property primaryPassword
        expect(instance).to.have.property('primaryPassword');
        // expect(instance.primaryPassword).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryUserName (base name: "secondaryUserName")', function() {
        // TODO: update the code to test the property secondaryUserName
        expect(instance).to.have.property('secondaryUserName');
        // expect(instance.secondaryUserName).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryPassword (base name: "secondaryPassword")', function() {
        // TODO: update the code to test the property secondaryPassword
        expect(instance).to.have.property('secondaryPassword');
        // expect(instance.secondaryPassword).to.be(expectedValueLiteral);
      });

      it('should have the property tertiaryUserName (base name: "tertiaryUserName")', function() {
        // TODO: update the code to test the property tertiaryUserName
        expect(instance).to.have.property('tertiaryUserName');
        // expect(instance.tertiaryUserName).to.be(expectedValueLiteral);
      });

      it('should have the property tertiaryPassword (base name: "tertiaryPassword")', function() {
        // TODO: update the code to test the property tertiaryPassword
        expect(instance).to.have.property('tertiaryPassword');
        // expect(instance.tertiaryPassword).to.be(expectedValueLiteral);
      });

      it('should have the property useDefaultCredentials (base name: "useDefaultCredentials")', function() {
        // TODO: update the code to test the property useDefaultCredentials
        expect(instance).to.have.property('useDefaultCredentials');
        // expect(instance.useDefaultCredentials).to.be(expectedValueLiteral);
      });

      it('should have the property useSecurePort (base name: "useSecurePort")', function() {
        // TODO: update the code to test the property useSecurePort
        expect(instance).to.have.property('useSecurePort');
        // expect(instance.useSecurePort).to.be(expectedValueLiteral);
      });

    });
  });

}));
