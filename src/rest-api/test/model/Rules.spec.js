/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Rules', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.Rules();
      });

      it('should create an instance of Rules', function() {
        // TODO: update the code to test Rules
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.Rules);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property startRuleType (base name: "startRuleType")', function() {
        // TODO: update the code to test the property startRuleType
        expect(instance).to.have.property('startRuleType');
        // expect(instance.startRuleType).to.be(expectedValueLiteral);
      });

      it('should have the property stopRuleType (base name: "stopRuleType")', function() {
        // TODO: update the code to test the property stopRuleType
        expect(instance).to.have.property('stopRuleType');
        // expect(instance.stopRuleType).to.be(expectedValueLiteral);
      });

      it('should have the property always (base name: "always")', function() {
        // TODO: update the code to test the property always
        expect(instance).to.have.property('always');
        // expect(instance.always).to.be(expectedValueLiteral);
      });

      it('should have the property withinTimeProfile (base name: "withinTimeProfile")', function() {
        // TODO: update the code to test the property withinTimeProfile
        expect(instance).to.have.property('withinTimeProfile');
        // expect(instance.withinTimeProfile).to.be(expectedValueLiteral);
      });

      it('should have the property outsideTimeProfile (base name: "outsideTimeProfile")', function() {
        // TODO: update the code to test the property outsideTimeProfile
        expect(instance).to.have.property('outsideTimeProfile');
        // expect(instance.outsideTimeProfile).to.be(expectedValueLiteral);
      });

      it('should have the property timeOfDayBetween (base name: "timeOfDayBetween")', function() {
        // TODO: update the code to test the property timeOfDayBetween
        expect(instance).to.have.property('timeOfDayBetween');
        // expect(instance.timeOfDayBetween).to.be(expectedValueLiteral);
      });

      it('should have the property daysOfWeek (base name: "daysOfWeek")', function() {
        // TODO: update the code to test the property daysOfWeek
        expect(instance).to.have.property('daysOfWeek');
        // expect(instance.daysOfWeek).to.be(expectedValueLiteral);
      });

      it('should have the property startActions (base name: "startActions")', function() {
        // TODO: update the code to test the property startActions
        expect(instance).to.have.property('startActions');
        // expect(instance.startActions).to.be(expectedValueLiteral);
      });

      it('should have the property stopActions (base name: "stopActions")', function() {
        // TODO: update the code to test the property stopActions
        expect(instance).to.have.property('stopActions');
        // expect(instance.stopActions).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
