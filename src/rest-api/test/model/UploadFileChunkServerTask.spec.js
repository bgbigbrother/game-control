/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UploadFileChunkServerTask', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.UploadFileChunkServerTask();
      });

      it('should create an instance of UploadFileChunkServerTask', function() {
        // TODO: update the code to test UploadFileChunkServerTask
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.UploadFileChunkServerTask);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property transferId (base name: "transferId")', function() {
        // TODO: update the code to test the property transferId
        expect(instance).to.have.property('transferId');
        // expect(instance.transferId).to.be(expectedValueLiteral);
      });

      it('should have the property chunkData (base name: "chunkData")', function() {
        // TODO: update the code to test the property chunkData
        expect(instance).to.have.property('chunkData');
        // expect(instance.chunkData).to.be(expectedValueLiteral);
      });

      it('should have the property offset (base name: "offset")', function() {
        // TODO: update the code to test the property offset
        expect(instance).to.have.property('offset');
        // expect(instance.offset).to.be(expectedValueLiteral);
      });

      it('should have the property size (base name: "size")', function() {
        // TODO: update the code to test the property size
        expect(instance).to.have.property('size');
        // expect(instance.size).to.be(expectedValueLiteral);
      });

      it('should have the property checksum (base name: "checksum")', function() {
        // TODO: update the code to test the property checksum
        expect(instance).to.have.property('checksum');
        // expect(instance.checksum).to.be(expectedValueLiteral);
      });

    });
  });

}));
