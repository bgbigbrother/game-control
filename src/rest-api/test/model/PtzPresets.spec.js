/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PtzPresets', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.PtzPresets();
      });

      it('should create an instance of PtzPresets', function() {
        // TODO: update the code to test PtzPresets
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.PtzPresets);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property devicePreset (base name: "devicePreset")', function() {
        // TODO: update the code to test the property devicePreset
        expect(instance).to.have.property('devicePreset');
        // expect(instance.devicePreset).to.be(expectedValueLiteral);
      });

      it('should have the property devicePresetInternalId (base name: "devicePresetInternalId")', function() {
        // TODO: update the code to test the property devicePresetInternalId
        expect(instance).to.have.property('devicePresetInternalId');
        // expect(instance.devicePresetInternalId).to.be(expectedValueLiteral);
      });

      it('should have the property defaultPreset (base name: "defaultPreset")', function() {
        // TODO: update the code to test the property defaultPreset
        expect(instance).to.have.property('defaultPreset');
        // expect(instance.defaultPreset).to.be(expectedValueLiteral);
      });

      it('should have the property pan (base name: "pan")', function() {
        // TODO: update the code to test the property pan
        expect(instance).to.have.property('pan');
        // expect(instance.pan).to.be(expectedValueLiteral);
      });

      it('should have the property tilt (base name: "tilt")', function() {
        // TODO: update the code to test the property tilt
        expect(instance).to.have.property('tilt');
        // expect(instance.tilt).to.be(expectedValueLiteral);
      });

      it('should have the property zoom (base name: "zoom")', function() {
        // TODO: update the code to test the property zoom
        expect(instance).to.have.property('zoom');
        // expect(instance.zoom).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
