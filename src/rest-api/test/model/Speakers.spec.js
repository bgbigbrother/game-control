/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Speakers', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.Speakers();
      });

      it('should create an instance of Speakers', function() {
        // TODO: update the code to test Speakers
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.Speakers);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property channel (base name: "channel")', function() {
        // TODO: update the code to test the property channel
        expect(instance).to.have.property('channel');
        // expect(instance.channel).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "createdDate")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property lastModified (base name: "lastModified")', function() {
        // TODO: update the code to test the property lastModified
        expect(instance).to.have.property('lastModified');
        // expect(instance.lastModified).to.be(expectedValueLiteral);
      });

      it('should have the property gisPoint (base name: "gisPoint")', function() {
        // TODO: update the code to test the property gisPoint
        expect(instance).to.have.property('gisPoint');
        // expect(instance.gisPoint).to.be(expectedValueLiteral);
      });

      it('should have the property shortName (base name: "shortName")', function() {
        // TODO: update the code to test the property shortName
        expect(instance).to.have.property('shortName');
        // expect(instance.shortName).to.be(expectedValueLiteral);
      });

      it('should have the property icon (base name: "icon")', function() {
        // TODO: update the code to test the property icon
        expect(instance).to.have.property('icon');
        // expect(instance.icon).to.be(expectedValueLiteral);
      });

      it('should have the property coverageDirection (base name: "coverageDirection")', function() {
        // TODO: update the code to test the property coverageDirection
        expect(instance).to.have.property('coverageDirection');
        // expect(instance.coverageDirection).to.be(expectedValueLiteral);
      });

      it('should have the property coverageDepth (base name: "coverageDepth")', function() {
        // TODO: update the code to test the property coverageDepth
        expect(instance).to.have.property('coverageDepth');
        // expect(instance.coverageDepth).to.be(expectedValueLiteral);
      });

      it('should have the property coverageFieldOfView (base name: "coverageFieldOfView")', function() {
        // TODO: update the code to test the property coverageFieldOfView
        expect(instance).to.have.property('coverageFieldOfView');
        // expect(instance.coverageFieldOfView).to.be(expectedValueLiteral);
      });

      it('should have the property recordingEnabled (base name: "recordingEnabled")', function() {
        // TODO: update the code to test the property recordingEnabled
        expect(instance).to.have.property('recordingEnabled');
        // expect(instance.recordingEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property prebufferEnabled (base name: "prebufferEnabled")', function() {
        // TODO: update the code to test the property prebufferEnabled
        expect(instance).to.have.property('prebufferEnabled');
        // expect(instance.prebufferEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property prebufferInMemory (base name: "prebufferInMemory")', function() {
        // TODO: update the code to test the property prebufferInMemory
        expect(instance).to.have.property('prebufferInMemory');
        // expect(instance.prebufferInMemory).to.be(expectedValueLiteral);
      });

      it('should have the property prebufferSeconds (base name: "prebufferSeconds")', function() {
        // TODO: update the code to test the property prebufferSeconds
        expect(instance).to.have.property('prebufferSeconds');
        // expect(instance.prebufferSeconds).to.be(expectedValueLiteral);
      });

      it('should have the property edgeStorageEnabled (base name: "edgeStorageEnabled")', function() {
        // TODO: update the code to test the property edgeStorageEnabled
        expect(instance).to.have.property('edgeStorageEnabled');
        // expect(instance.edgeStorageEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property edgeStoragePlaybackEnabled (base name: "edgeStoragePlaybackEnabled")', function() {
        // TODO: update the code to test the property edgeStoragePlaybackEnabled
        expect(instance).to.have.property('edgeStoragePlaybackEnabled');
        // expect(instance.edgeStoragePlaybackEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property manualRecordingTimeoutEnabled (base name: "manualRecordingTimeoutEnabled")', function() {
        // TODO: update the code to test the property manualRecordingTimeoutEnabled
        expect(instance).to.have.property('manualRecordingTimeoutEnabled');
        // expect(instance.manualRecordingTimeoutEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property manualRecordingTimeoutMinutes (base name: "manualRecordingTimeoutMinutes")', function() {
        // TODO: update the code to test the property manualRecordingTimeoutMinutes
        expect(instance).to.have.property('manualRecordingTimeoutMinutes');
        // expect(instance.manualRecordingTimeoutMinutes).to.be(expectedValueLiteral);
      });

      it('should have the property recordingStorage (base name: "recordingStorage")', function() {
        // TODO: update the code to test the property recordingStorage
        expect(instance).to.have.property('recordingStorage');
        // expect(instance.recordingStorage).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
