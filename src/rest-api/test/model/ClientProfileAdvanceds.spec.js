/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ClientProfileAdvanceds', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.ClientProfileAdvanceds();
      });

      it('should create an instance of ClientProfileAdvanceds', function() {
        // TODO: update the code to test ClientProfileAdvanceds
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.ClientProfileAdvanceds);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property advancedMaxDecodingThreads (base name: "advancedMaxDecodingThreads")', function() {
        // TODO: update the code to test the property advancedMaxDecodingThreads
        expect(instance).to.have.property('advancedMaxDecodingThreads');
        // expect(instance.advancedMaxDecodingThreads).to.be(expectedValueLiteral);
      });

      it('should have the property advancedMaxDecodingThreadsLocked (base name: "advancedMaxDecodingThreadsLocked")', function() {
        // TODO: update the code to test the property advancedMaxDecodingThreadsLocked
        expect(instance).to.have.property('advancedMaxDecodingThreadsLocked');
        // expect(instance.advancedMaxDecodingThreadsLocked).to.be(expectedValueLiteral);
      });

      it('should have the property advancedDeinterlacing (base name: "advancedDeinterlacing")', function() {
        // TODO: update the code to test the property advancedDeinterlacing
        expect(instance).to.have.property('advancedDeinterlacing');
        // expect(instance.advancedDeinterlacing).to.be(expectedValueLiteral);
      });

      it('should have the property advancedDeinterlacingLocked (base name: "advancedDeinterlacingLocked")', function() {
        // TODO: update the code to test the property advancedDeinterlacingLocked
        expect(instance).to.have.property('advancedDeinterlacingLocked');
        // expect(instance.advancedDeinterlacingLocked).to.be(expectedValueLiteral);
      });

      it('should have the property advancedVideoPlayerDiagnosticLevel (base name: "advancedVideoPlayerDiagnosticLevel")', function() {
        // TODO: update the code to test the property advancedVideoPlayerDiagnosticLevel
        expect(instance).to.have.property('advancedVideoPlayerDiagnosticLevel');
        // expect(instance.advancedVideoPlayerDiagnosticLevel).to.be(expectedValueLiteral);
      });

      it('should have the property advancedVideoPlayerDiagnosticLevelLocked (base name: "advancedVideoPlayerDiagnosticLevelLocked")', function() {
        // TODO: update the code to test the property advancedVideoPlayerDiagnosticLevelLocked
        expect(instance).to.have.property('advancedVideoPlayerDiagnosticLevelLocked');
        // expect(instance.advancedVideoPlayerDiagnosticLevelLocked).to.be(expectedValueLiteral);
      });

      it('should have the property advancedVideoPlayerHardwareDecodingMode (base name: "advancedVideoPlayerHardwareDecodingMode")', function() {
        // TODO: update the code to test the property advancedVideoPlayerHardwareDecodingMode
        expect(instance).to.have.property('advancedVideoPlayerHardwareDecodingMode');
        // expect(instance.advancedVideoPlayerHardwareDecodingMode).to.be(expectedValueLiteral);
      });

      it('should have the property advancedVideoPlayerHardwareDecodingModeLocked (base name: "advancedVideoPlayerHardwareDecodingModeLocked")', function() {
        // TODO: update the code to test the property advancedVideoPlayerHardwareDecodingModeLocked
        expect(instance).to.have.property('advancedVideoPlayerHardwareDecodingModeLocked');
        // expect(instance.advancedVideoPlayerHardwareDecodingModeLocked).to.be(expectedValueLiteral);
      });

      it('should have the property advancedAdaptiveStreaming (base name: "advancedAdaptiveStreaming")', function() {
        // TODO: update the code to test the property advancedAdaptiveStreaming
        expect(instance).to.have.property('advancedAdaptiveStreaming');
        // expect(instance.advancedAdaptiveStreaming).to.be(expectedValueLiteral);
      });

      it('should have the property advancedAdaptiveStreamingLocked (base name: "advancedAdaptiveStreamingLocked")', function() {
        // TODO: update the code to test the property advancedAdaptiveStreamingLocked
        expect(instance).to.have.property('advancedAdaptiveStreamingLocked');
        // expect(instance.advancedAdaptiveStreamingLocked).to.be(expectedValueLiteral);
      });

      it('should have the property advancedTimeZone (base name: "advancedTimeZone")', function() {
        // TODO: update the code to test the property advancedTimeZone
        expect(instance).to.have.property('advancedTimeZone');
        // expect(instance.advancedTimeZone).to.be(expectedValueLiteral);
      });

      it('should have the property advancedTimeZoneLocked (base name: "advancedTimeZoneLocked")', function() {
        // TODO: update the code to test the property advancedTimeZoneLocked
        expect(instance).to.have.property('advancedTimeZoneLocked');
        // expect(instance.advancedTimeZoneLocked).to.be(expectedValueLiteral);
      });

      it('should have the property advancedTimeZoneCustom (base name: "advancedTimeZoneCustom")', function() {
        // TODO: update the code to test the property advancedTimeZoneCustom
        expect(instance).to.have.property('advancedTimeZoneCustom');
        // expect(instance.advancedTimeZoneCustom).to.be(expectedValueLiteral);
      });

      it('should have the property advancedTimeZoneCustomLocked (base name: "advancedTimeZoneCustomLocked")', function() {
        // TODO: update the code to test the property advancedTimeZoneCustomLocked
        expect(instance).to.have.property('advancedTimeZoneCustomLocked');
        // expect(instance.advancedTimeZoneCustomLocked).to.be(expectedValueLiteral);
      });

      it('should have the property advancedMulticast (base name: "advancedMulticast")', function() {
        // TODO: update the code to test the property advancedMulticast
        expect(instance).to.have.property('advancedMulticast');
        // expect(instance.advancedMulticast).to.be(expectedValueLiteral);
      });

      it('should have the property advancedMulticastLocked (base name: "advancedMulticastLocked")', function() {
        // TODO: update the code to test the property advancedMulticastLocked
        expect(instance).to.have.property('advancedMulticastLocked');
        // expect(instance.advancedMulticastLocked).to.be(expectedValueLiteral);
      });

    });
  });

}));
