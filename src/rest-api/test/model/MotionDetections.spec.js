/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MilestoneIntegrationPlatformVmsResTfulApi);
  }
}(this, function(expect, MilestoneIntegrationPlatformVmsResTfulApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MotionDetections', function() {
      beforeEach(function() {
        instance = new MilestoneIntegrationPlatformVmsResTfulApi.MotionDetections();
      });

      it('should create an instance of MotionDetections', function() {
        // TODO: update the code to test MotionDetections
        expect(instance).to.be.a(MilestoneIntegrationPlatformVmsResTfulApi.MotionDetections);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property manualSensitivityEnabled (base name: "manualSensitivityEnabled")', function() {
        // TODO: update the code to test the property manualSensitivityEnabled
        expect(instance).to.have.property('manualSensitivityEnabled');
        // expect(instance.manualSensitivityEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property manualSensitivity (base name: "manualSensitivity")', function() {
        // TODO: update the code to test the property manualSensitivity
        expect(instance).to.have.property('manualSensitivity');
        // expect(instance.manualSensitivity).to.be(expectedValueLiteral);
      });

      it('should have the property threshold (base name: "threshold")', function() {
        // TODO: update the code to test the property threshold
        expect(instance).to.have.property('threshold');
        // expect(instance.threshold).to.be(expectedValueLiteral);
      });

      it('should have the property keyframesOnly (base name: "keyframesOnly")', function() {
        // TODO: update the code to test the property keyframesOnly
        expect(instance).to.have.property('keyframesOnly');
        // expect(instance.keyframesOnly).to.be(expectedValueLiteral);
      });

      it('should have the property processTime (base name: "processTime")', function() {
        // TODO: update the code to test the property processTime
        expect(instance).to.have.property('processTime');
        // expect(instance.processTime).to.be(expectedValueLiteral);
      });

      it('should have the property detectionMethod (base name: "detectionMethod")', function() {
        // TODO: update the code to test the property detectionMethod
        expect(instance).to.have.property('detectionMethod');
        // expect(instance.detectionMethod).to.be(expectedValueLiteral);
      });

      it('should have the property generateMotionMetadata (base name: "generateMotionMetadata")', function() {
        // TODO: update the code to test the property generateMotionMetadata
        expect(instance).to.have.property('generateMotionMetadata');
        // expect(instance.generateMotionMetadata).to.be(expectedValueLiteral);
      });

      it('should have the property useExcludeRegions (base name: "useExcludeRegions")', function() {
        // TODO: update the code to test the property useExcludeRegions
        expect(instance).to.have.property('useExcludeRegions');
        // expect(instance.useExcludeRegions).to.be(expectedValueLiteral);
      });

      it('should have the property gridSize (base name: "gridSize")', function() {
        // TODO: update the code to test the property gridSize
        expect(instance).to.have.property('gridSize');
        // expect(instance.gridSize).to.be(expectedValueLiteral);
      });

      it('should have the property excludeRegions (base name: "excludeRegions")', function() {
        // TODO: update the code to test the property excludeRegions
        expect(instance).to.have.property('excludeRegions');
        // expect(instance.excludeRegions).to.be(expectedValueLiteral);
      });

      it('should have the property hardwareAccelerationMode (base name: "hardwareAccelerationMode")', function() {
        // TODO: update the code to test the property hardwareAccelerationMode
        expect(instance).to.have.property('hardwareAccelerationMode');
        // expect(instance.hardwareAccelerationMode).to.be(expectedValueLiteral);
      });

      it('should have the property relations (base name: "relations")', function() {
        // TODO: update the code to test the property relations
        expect(instance).to.have.property('relations');
        // expect(instance.relations).to.be(expectedValueLiteral);
      });

    });
  });

}));
